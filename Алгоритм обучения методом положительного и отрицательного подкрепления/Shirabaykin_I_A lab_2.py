# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v5fpUd3KEFrwNzfUiyh01ch0Lot6jeCC
"""

!pip install tensorflow
!pip install keras

import random
import numpy as np
from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model

"""Шаг 1. Генерация случайных значений для синаптических весов и порога чувствительности нейронов"""

def initialize_weights(n, k):
    weights = [[random.uniform(-0.5, 0.5) for _ in range(k)] for _ in range(n)]
    threshold = random.uniform(-0.5, 0.5)
    return weights, threshold

"""Шаг 2. Подача входного образа на входы персептрона"""

def input_pattern(n):
    return [random.choice([0, 1]) for _ in range(n)]

"""Шаг 3. Вычисление взвешенной суммы входных сигналов и получение выходного сигнала"""

def calculate_output(weights, inputs, threshold):
    outputs = []
    for j in range(len(weights[0])):
        net = sum(weights[i][j] * inputs[i] for i in range(len(inputs))) - threshold
        outputs.append(1 if net > 0 else 0)
    return outputs

"""Шаг 4а. Проверка соответствия полученного выходного сигнала желаемому"""

def check_output(outputs, desired_outputs):
    return all(outputs[i] == desired_outputs[i] for i in range(len(outputs)))

"""Шаги 4б, 4в. Коррекция весов активных входов при неправильном выходном сигнале"""

def adjust_weights(weights, inputs, outputs, desired_outputs):
    for j in range(len(weights[0])):
        if outputs[j] == 0 and desired_outputs[j] == 1:  # Если выходной сигнал неправильный и равен нулю
            for i in range(len(inputs)):
                weights[i][j] += inputs[i]  # Увеличить веса активных входов
        elif outputs[j] == 1 and desired_outputs[j] == 0:  # Если выходной сигнал неправильный и равен единице
            for i in range(len(inputs)):
                weights[i][j] -= inputs[i]  # Уменьшить веса активных входов
    return weights

"""Пример использования алгоритма"""

n = 3  # Количество входов
k = 2  # Количество нейронов

weights, threshold = initialize_weights(n, k)
inputs = input_pattern(n)
desired_outputs = [1, 0]  # Желаемые выходные сигналы

outputs = calculate_output(weights, inputs, threshold)

while not check_output(outputs, desired_outputs):
    weights = adjust_weights(weights, inputs, outputs, desired_outputs)
    outputs = calculate_output(weights, inputs, threshold)

print("Окончательные веса:", weights)
print("Выходной сигнал:", outputs)

"""Реальное обучение персептрона с использованием Keras"""

# Пример данных для обучения
# Входные данные
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
# Желаемые выходные данные
y = np.array([[0], [1], [1], [0]])  # Пример для XOR

# Создание модели персептрона
model = Sequential()
model.add(Dense(1, input_dim=2, activation='sigmoid'))

# Компиляция модели
model.compile(loss='mean_squared_error', optimizer='sgd')

# Обучение модели
model.fit(X, y, epochs=1000, verbose=0)

# Тестирование модели
predictions = model.predict(X)
print("Predictions:")
print(predictions)